"""
Script para verificar la conexi√≥n a MongoDB Atlas
"""

from pymongo import MongoClient
from src.config import settings
import sys

print("=" * 60)
print("PRUEBA DE CONEXI√ìN A MONGODB ATLAS")
print("=" * 60)

print(f"\nüìå Configuraci√≥n:")
print(f"  ‚Ä¢ URI: {settings.mongodb_uri[:40]}...")
print(f"  ‚Ä¢ Database: {settings.mongodb_database}")
print(f"  ‚Ä¢ Collection: {settings.mongodb_collection}")

print("\nüîå Intentando conectar a MongoDB Atlas...")

try:
    # Conectar a MongoDB
    client = MongoClient(settings.mongodb_uri, serverSelectionTimeoutMS=5000)
    
    # Forzar una conexi√≥n para verificar
    client.admin.command('ping')
    print("‚úÖ Conexi√≥n exitosa a MongoDB Atlas!")
    
    # Obtener informaci√≥n de la base de datos
    db = client[settings.mongodb_database]
    collection = db[settings.mongodb_collection]
    
    # Contar documentos
    doc_count = collection.count_documents({})
    print(f"\nüìä Estad√≠sticas de la colecci√≥n '{settings.mongodb_collection}':")
    print(f"  ‚Ä¢ Total de documentos: {doc_count}")
    
    # Obtener informaci√≥n sobre los modelos usados
    models = collection.distinct("model")
    if models:
        print(f"  ‚Ä¢ Modelos de embeddings encontrados: {models}")
    
    # Obtener un documento de muestra (sin embedding)
    sample = collection.find_one({}, {"embedding": 0})
    if sample:
        print("\nüìÑ Estructura de documento encontrada:")
        for key in sample.keys():
            if key != "_id":
                print(f"    - {key}")
    
    # Verificar dimensiones de embeddings
    dims = collection.distinct("dims")
    if dims:
        print(f"\nüìè Dimensiones de embeddings: {dims}")
    
    print("\n‚úÖ Tu configuraci√≥n est√° correcta y la base de datos es accesible!")
    
except Exception as e:
    print(f"\n‚ùå Error al conectar: {e}")
    print("\nüí° Posibles soluciones:")
    print("  1. Verifica que tu IP est√© en la whitelist de MongoDB Atlas")
    print("  2. Verifica las credenciales en el URI")
    print("  3. Aseg√∫rate de que el cluster est√© activo")
    sys.exit(1)
finally:
    if 'client' in locals():
        client.close()

print("\n" + "=" * 60)
